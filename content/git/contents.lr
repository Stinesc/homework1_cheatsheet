_model: page
---
title: Git
---
body:

Основные команды и задачи Git.

# Создать новый репозиторий

`git init` - создать новый проект в текущей директории<br>
`git init folder-name`	- создать новый проект в указанной директории<br>

# Клонирование репозитория

`git clone https://github.com:nicothin/web-design.git` - клонировать удаленный репозиторий в одноименную директорию<br>
`git clone https://github.com:nicothin/web-design.git FolderName` - клонировать удаленный репозиторий в директорию «FolderName»<br>
`git clone https://github.com:nicothin/web-design.git .` - клонировать репозиторий в текущую директорию<br>

# Просмотр изменений

`git status` - показать состояние репозитория (отслеживаемые, изменённые, новые файлы и пр.)<br>
`git diff` - сравнить рабочую директорию и индекс (неотслеживаемые файлы ИГНОРИРУЮТСЯ)<br>
`git diff --color-words` - сравнить рабочую директорию и индекс, показать отличия в словах (неотслеживаемые файлы ИГНОРИРУЮТСЯ)<br>
`git diff index.html` - сравнить файл из рабочей директории и индекс<br>
`git diff HEAD` -  сравнить рабочую директорию и коммит, на который указывает HEAD (неотслеживаемые файлы ИГНОРИРУЮТСЯ)<br>
`git diff --staged` - сравнить индекс и коммит с HEAD<br>
`git diff master feature` - посмотреть что сделано в ветке feature по сравнению с веткой master<br>
`git diff --name-only master feature` - посмотреть что сделано в ветке feature по сравнению с веткой master, показать только имена файлов<br>
`git diff master...feature` - посмотреть что сделано в ветке feature с момента (коммита) расхождения с master<br>

# Добавление изменений в индекс

`git add .` - добавить в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий<br>
`git add text.txt` - добавить в индекс указанный файл (был изменён, был удалён или это новый файл)<br>
`git add -i` - запустить интерактивную оболочку для добавления в индекс только выбранных файлов<br>
`git add -p` - показать новые/изменённые файлы по очереди с указанием их изменений и вопросом об отслеживании/индексировании<br>

# Удаление изменений из индекса

`git reset` - убрать из индекса все добавленные в него изменения (в рабочей директории все изменения сохранятся), антипод git add<br>
`git reset readme.txt` - убрать из индекса изменения указанного файла (в рабочей директории изменения сохранятся)<br>

# Отмена изменений

`git checkout text.txt` - ОПАСНО: отменить изменения в файле, вернуть состояние файла, имеющееся в индексе<br>
`git reset --hard` - ОПАСНО: отменить изменения; вернуть то, что в коммите, на который указывает HEAD (незакомиченные изменения удалены из индекса и из рабочей директории, неотслеживаемые файлы останутся на месте)<br>
`git clean -df` - удалить неотслеживаемые файлы и директории<br>

# Коммиты

`git commit -m "Name of commit"` - зафиксировать в коммите проиндексированные изменения (закоммитить), добавить сообщение<br>
`git commit -a -m "Name of commit"` - проиндексировать отслеживаемые файлы (ТОЛЬКО отслеживаемые, но НЕ новые файлы) и закоммитить, добавить сообщение<br>

# Отмена коммитов и перемещение по истории

`git revert HEAD --no-edit` - создать новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения<br>
`git revert b9533bb --no-edit` - то же, но отменяются изменения, внесённые коммитом с указанным хешем (b9533bb)<br>
`git commit --amend -m "Название"` - «перекоммитить» изменения последнего коммита, заменить его новым коммитом с другим сообщением (сдвинуть текущую ветку на один коммит назад, сохранив рабочую директорию и индекс «как есть», создать новый коммит с данными из «отменяемого» коммита, но новым сообщением)<br>
`git reset --hard @~` - передвинуть HEAD (и ветку) на предыдущий коммит, рабочую директорию и индекс сделать такими, какими они были в момент предыдущего коммита<br>
`git reset --hard 75e2d51` - передвинуть HEAD (и ветку) на коммит с указанным хешем, рабочую директорию и индекс сделать такими, какими они были в момент указанного коммита<br>
`git reset --soft @~` - передвинуть HEAD (и ветку) на предыдущий коммит, но в рабочей директории и индексе оставить все изменения<br>
`git reset --soft @~2` - то же, но передвинуть HEAD (и ветку) на 2 коммита назад<br>
`git reset @~` - передвинуть HEAD (и ветку) на предыдущий коммит, рабочую директорию оставить как есть, индекс сделать таким, каким он был в момент предыдущего коммита (удобнее, чем git reset --soft @~, если индекс нужно задать заново)<br>
`git reset --keep @~` - передвинуть HEAD (и ветку) на предыдущий коммит, сбросить индекс, но в рабочей директории оставить изменения, если возможно (если файл с изменениями между коммитами менялся, будет выдана ошибка и переключение не произойдёт)<br>

# Временно переключиться на другой коммит

`git checkout b9533bb` - переключиться на коммит с указанным хешем (переместить HEAD на указанный коммит, рабочую директорию вернуть к состоянию, на момент этого коммита)<br>
`git checkout master` - переключиться на коммит, на который указывает master (переместить HEAD на коммит, на который указывает master, рабочую директорию вернуть к состоянию на момент этого коммита)<br>

# Переключиться на другой коммит и продолжить работу с него

`git checkout -b new-branch 5589877` - создать ветку new-branch, начинающуюся с коммита c хешем 5589877 (переместить HEAD на указанный коммит, рабочую директорию вернуть к состоянию, на момент этого коммита, создать указатель на этот коммит (ветку) с указанным именем)<br>

# Восстановление изменений

`git checkout 5589877 index.html` - восстановить в рабочей директории указанный файл на момент указанного коммита (и добавить это изменение в индекс) (git reset index.html для удаления из индекса, но сохранения изменений в файле)<br>

# Копирование коммита (перенос коммитов)

`git cherry-pick 5589877` - скопировать на активную ветку изменения из указанного коммита, закоммитить эти изменения<br>
`git cherry-pick master~2..master` - скопировать на активную ветку изменения из master (2 последних коммита)<br>
`git cherry-pick -n 5589877` - скопировать на активную ветку изменения из указанного коммита, но НЕ КОММИТИТЬ (подразумевается, что мы сами потом закоммитим)<br>
`git cherry-pick master..feature` - скопировать на активную ветку изменения из всех коммитов ветки feature с момента её расхождения с master (похоже на слияние веток, но это копирование изменений, а не слияние), закоммитить эти изменения; это может вызвать конфликт<br>
`git cherry-pick --abort` - прервать конфликтный перенос коммитов<br>
`git cherry-pick --continue` - продолжить конфликтный перенос коммитов (сработает только после решения конфликта)<br>

# Удаление файла

`git rm text.txt` - удалить отслеживаемый неизменённый файл и проиндексировать это изменение<br>
`git rm -f text.txt` - удалить отслеживаемый изменённый файл и проиндексировать это изменение<br>
`git rm -r log/` - удалить всё содержимое отслеживаемой директории log/ и проиндексировать это изменение<br>
`git rm ind*` - удалить все отслеживаемые файлы с именем, начинающимся на «ind» в текущей директории и проиндексировать это изменение<br>
`git rm --cached readme.txt` - удалить из отслеживаемых индексированный файл (ФАЙЛ ОСТАНЕТСЯ НА МЕСТЕ) (часто используется для нечаянно добавленных в отслеживаемые файлов)<br>

# Перемещение/переименование файлов

`git mv text.txt test_new.txt` - переименовать файл «text.txt» в «test_new.txt» и проиндексировать это изменение<br>
`git mv readme_new.md folder/` - переместить файл readme_new.md в директорию folder/ (должна существовать) и проиндексировать это изменение<br>

# История коммитов

`git log master` - показать коммиты в указанной ветке<br>
`git log -2` - показать последние 2 коммита в активной ветке<br>
`git log -2 --stat` - показать последние 2 коммита и статистику внесенных ими изменений<br>
`git log -p -22` - показать последние 22 коммита и внесенную ими разницу на уровне строк<br>
`git log --graph -10` - показать последние 10 коммитов с ASCII-представлением ветвления<br>
`git log --since=2.weeks` - показать коммиты за последние 2 недели<br>
`git log --after '2018-06-30'` - показать коммиты, сделанные после указанной даты<br>
`git log index.html` - показать историю изменений файла index.html (только коммиты)<br>
`git log -5 index.html` - показать историю изменений файла index.html, последние 5 коммитов (только коммиты)<br>
`git log -p index.html` - показать историю изменений файла index.html (коммиты и изменения)<br>
`git log -G'myFunction' -p` - показать все коммиты, в которых менялись строки с myFunction (в кавычках регулярное выражение)<br>
`git log -L '/<head>/','/<\/head>/':index.html` - показать изменения от указанного до указанного регулярных выражений в указанном файле<br>
`git log --grep fix` - показать коммиты, в описании которых есть буквосочетание fix (регистрозависимо, только коммиты текущей ветки)<br>
`git log --grep fix -i` - показать коммиты, в описании которых есть буквосочетание fix (регистроНЕзависимо, только коммиты текущей ветки)<br>
`git log --grep 'fix(ing|me)' -P` - показать коммиты, в описании которых есть совпадения для регулярного выражения (только коммиты текущей ветки)<br>
`git log --pretty=format:"%h - %an, %ar : %s" -4` - показать последние 4 коммита с форматированием выводимых данных<br>
`git log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short` - мой формат вывода, висящий на алиасе оболочки<br>
`git log master..branch_99` - показать коммиты из ветки branch_99, которые не влиты в master<br>
`git log branch_99..master` - показать коммиты из ветки master, которые не влиты в branch_99<br>
`git log master...branch_99 --boundary -- graph` - показать коммиты из указанных веток, начиная с их расхождения (коммит расхождения будет показан)<br>
`git show 60d6582` - показать изменения из коммита с указанным хешем<br>
`git show HEAD~` - показать данные о предыдущем коммите в активной ветке<br>
`git show @~` - аналогично предыдущему<br>
`git show HEAD~3` - показать данные о коммите, который был 3 коммита назад<br>
`git show my_branch~2` - показать данные о коммите, который был 2 коммита назад в указанной ветке<br>
`git show @~:index.html` - показать контент указанного файла на момент предыдущего (от HEAD) коммита<br>
`git show :/"подвал"` - показать самый новый коммит, в описании которого есть указанное слово (из любой ветки)<br>

# Ветки

`git branch` - показать список веток<br>
`git branch -v` - показать список веток и последний коммит в каждой<br>
`git branch new_branch` - создать новую ветку с указанным именем на текущем коммите<br>
`git branch new_branch 5589877` - создать новую ветку с указанным именем на указанном коммите<br>
`git branch -f master 5589877` - переместить ветку master на указанный коммит<br>
`git branch -f master master~2` - переместить ветку master на 2 коммита назад<br>
`git checkout new_branch` - перейти в указанную ветку<br>
`git checkout -b new_branch` - создать новую ветку с указанным именем и перейти в неё<br>
`git checkout -B master 5589877` - переместить ветку с указанным именем на указанный коммит и перейти в неё<br>
`git merge hotfix` - влить в ветку, в которой находимся, данные из ветки hotfix<br>
`git merge hotfix -m "Горячая правка"` - влить в ветку, в которой находимся, данные из ветки hotfix (указано сообщение коммита слияния)<br>
`git merge hotfix --log` - влить в ветку, в которой находимся, данные из ветки hotfix, показать редактор описания коммита, добавить в него сообщения вливаемых коммитов<br>
`git merge hotfix --no-ff` - влить в ветку, в которой находимся, данные из ветки hotfix, запретить простой сдвиг указателя, изменения из hotfix «останутся» в ней, а в активной ветке появится только коммит слияния<br>
`git branch -d hotfix` - удалить ветку hotfix (используется, если её изменения уже влиты в главную ветку)<br>
`git branch --merged` - показать ветки, уже слитые с активной<br>
`git branch --no-merged` - показать ветки, не слитые с активной<br>
`git branch -a` - показать все имеющиеся ветки (в т.ч. на удаленных репозиториях)<br>
`git branch -m old_branch_name new_branch_name` - переименовать локально ветку old_branch_name в new_branch_name<br>
`git branch -m new_branch_name` - переименовать локально ТЕКУЩУЮ ветку в new_branch_name<br>
`git push origin :old_branch_name new_branch_name` - применить переименование в удаленном репозитории<br>
`git branch --unset-upstream # завершить процесс переименования<br>

# Временное сохранение изменений без коммита

`git stash` - временно сохранить незакоммиченные изменения и убрать их из рабочей директории<br>
`git stash pop` - вернуть сохраненные командой git stash изменения в рабочую директорию<br>

# Удалённые репозитории

`git remote -v` - показать список удалённых репозиториев, связанных с локальным<br>
`git remote remove origin` - убрать привязку удалённого репозитория с сокр. именем origin<br>
`git remote add origin https://github.com:nicothin/test.git` - добавить удалённый репозиторий (с сокр. именем origin) с указанным URL<br>
`git remote rm origin` - удалить привязку удалённого репозитория<br>
`git remote show origin` - получить данные об удалённом репозитории с сокращенным именем origin<br>
`git fetch origin` - скачать все ветки с удаленного репозитория (с сокр. именем origin), но не сливать со своими ветками<br>
`git fetch origin master` - то же, но скачивается только указанная ветка<br>
`git checkout --track origin/github_branch` - создать локальную ветку github_branch (данные взять из удалённого репозитория с сокр. именем origin, ветка github_branch) и переключиться на неё<br>
`git push origin master` - отправить в удалённый репозиторий (с сокр. именем origin) данные своей ветки master<br>
`git pull origin` - влить изменения с удалённого репозитория (все ветки)<br>
`git pull origin master` - влить изменения с удалённого репозитория (только указанная ветка)<br>
